class SessionSenderSM {
  state {
    initSessionSender {
      // (5): started SessionSender
      entry / {
        stateNotify("initSessionSender");
      };
      createForwardThread -> initForwardThread;
      failedCreateForwardThread -> closeSessionListener;
    }
    initForwardThread {
      // (6): src listner:[id] started
      entry / {
        stateNotify("initForwardThread");
      };
      startedFowardThread -> activeForwardThread;
      failedStartFowardThread -> closeSessionSender;
    }
    activeForwardThread {
      // (12): clientForward started
      entry / {
        stateNotify("activeForwardThread");
      };
      dstClose -> closeSessionSender;
      srcClose -> waitCloseSender;
    }
    waitCloseSender {
       entry / {
        stateNotify("waitCloseSender");
      };
      dstClose -> closeSessionSender;
    }
    closeSessionSender {
       entry / {
        stateNotify("closeSessionSender");
      };
    }

  }
  boolean stateNotify(String node) {return true;}
}