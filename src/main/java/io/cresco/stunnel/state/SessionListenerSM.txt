class SessionListenerSM {
  state {
    initSessionListener {
      // (5): started SessionListener
      entry / {
        stateNotify("initSessionListener");
      };
      createForwardThread -> initForwardThread;
      failedCreateForwardThread -> closeSessionListener;
    }
    initForwardThread {
      // (6): src listner:[id] started
      entry / {
        stateNotify("initForwardThread");
      };
      startedFowardThread -> activeForwardThread;
      failedStartFowardThread -> closeSessionListener;
    }
    activeForwardThread {
      // (12): clientForward started
      entry / {
        stateNotify("activeForwardThread");
      };
      // (13) src port closed by external
      srcClose -> closeSessionListener;
      dstClose -> waitCloseListener;
    }
    waitCloseListener {
       entry / {
        stateNotify("waitCloseListener");
      };
      srcClose -> closeSessionListener;
    }
    closeSessionListener {
       entry / {
        stateNotify("closeSessionListener");
      };
    }

  }
  boolean stateNotify(String node) {return true;}
}